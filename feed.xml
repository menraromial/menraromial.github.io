<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://menraromial.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://menraromial.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-12T13:59:31+00:00</updated><id>https://menraromial.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal website and blog by MENRA W. Romial, showcasing expertise in cloud computing, edge technologies, IoT, and innovation. Explore research insights, technical articles, and projects aimed at advancing technology and innovation. </subtitle><entry><title type="html">Setting Up a Kubernetes Cluster with Kubeadm and CRI-O</title><link href="https://menraromial.github.io/blog/2025/kubernetes-with-kubeadm-and-cri.io/" rel="alternate" type="text/html" title="Setting Up a Kubernetes Cluster with Kubeadm and CRI-O"/><published>2025-03-25T16:40:16+00:00</published><updated>2025-03-25T16:40:16+00:00</updated><id>https://menraromial.github.io/blog/2025/kubernetes-with-kubeadm-and-cri.io</id><content type="html" xml:base="https://menraromial.github.io/blog/2025/kubernetes-with-kubeadm-and-cri.io/"><![CDATA[<h2 id="prerequisites">Prerequisites</h2> <p>Before setting up a Kubernetes cluster using Kubeadm and CRI-O, ensure that you meet the following requirements:</p> <h3 id="hardware-requirements">Hardware Requirements</h3> <ul> <li>At least <strong>2 GB of RAM</strong> per node (4 GB recommended for the master node)</li> <li>At least <strong>2 CPUs</strong> per node</li> <li><strong>20 GB of free disk space</strong></li> <li>A stable <strong>internet connection</strong></li> <li>All nodes should be able to communicate with each other</li> </ul> <h3 id="software-requirements">Software Requirements</h3> <ul> <li>A supported <strong>Linux distribution</strong> (Ubuntu 20.04+ or Debian 10+ recommended)</li> <li>User access with <strong>sudo privileges</strong></li> <li>Basic understanding of <strong>Linux command-line interface (CLI)</strong></li> <li>Knowledge of <strong>networking concepts</strong></li> </ul> <h2 id="step-1-configure-kernel-parameters">Step 1: Configure Kernel Parameters</h2> <p>Kubernetes requires some kernel parameters to be set to allow IPtables to see bridged traffic.</p> <h3 id="load-required-kernel-modules">Load Required Kernel Modules</h3> <p>Run the following commands on all nodes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
</span><span class="no">EOF

</span><span class="nb">sudo </span>modprobe overlay
<span class="nb">sudo </span>modprobe br_netfilter
</code></pre></div></div> <h3 id="set-kernel-parameters-for-kubernetes">Set Kernel Parameters for Kubernetes</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
</span><span class="no">EOF
</span></code></pre></div></div> <p>Apply the changes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sysctl <span class="nt">--system</span>
</code></pre></div></div> <h2 id="step-2-disable-swap">Step 2: Disable Swap</h2> <p>Kubernetes does not work well with swap enabled. Disable it using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swapoff <span class="nt">-a</span>
</code></pre></div></div> <p>To make this change persistent, remove any swap entries from <code class="language-plaintext highlighter-rouge">/etc/fstab</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/fstab
</code></pre></div></div> <h2 id="step-3-install-cri-o-container-runtime-interface---open">Step 3: Install CRI-O (Container Runtime Interface - Open)</h2> <h3 id="add-cri-o-repository-and-install">Add CRI-O Repository and Install</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> software-properties-common gpg curl apt-transport-https ca-certificates

curl <span class="nt">-fsSL</span> https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key | <span class="se">\</span>
    gpg <span class="nt">--dearmor</span> | <span class="nb">sudo tee</span> /etc/apt/keyrings/cri-o-apt-keyring.gpg <span class="o">&gt;</span>/dev/null
<span class="nb">echo</span> <span class="s2">"deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /"</span> | <span class="se">\</span>
    <span class="nb">sudo tee</span> /etc/apt/sources.list.d/cri-o.list

<span class="nb">sudo </span>apt-get update <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> cri-o
</code></pre></div></div> <h3 id="enable-and-start-cri-o-service">Enable and Start CRI-O Service</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>crio <span class="nt">--now</span>
<span class="nb">sudo </span>systemctl start crio.service
</code></pre></div></div> <h2 id="step-4-install-kubernetes-components">Step 4: Install Kubernetes Components</h2> <h3 id="add-kubernetes-repository">Add Kubernetes Repository</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">KUBERNETES_VERSION</span><span class="o">=</span>1.30
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/apt/keyrings
curl <span class="nt">-fsSL</span> https://pkgs.k8s.io/core:/stable:/v<span class="nv">$KUBERNETES_VERSION</span>/deb/Release.key | <span class="se">\</span>
    gpg <span class="nt">--dearmor</span> | <span class="nb">sudo tee</span> /etc/apt/keyrings/kubernetes-apt-keyring.gpg <span class="o">&gt;</span> /dev/null

<span class="nb">echo</span> <span class="s2">"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v</span><span class="nv">$KUBERNETES_VERSION</span><span class="s2">/deb/ /"</span> | <span class="se">\</span>
    <span class="nb">sudo tee</span> /etc/apt/sources.list.d/kubernetes.list
</code></pre></div></div> <h3 id="install-kubeadm-kubelet-and-kubectl">Install Kubeadm, Kubelet, and Kubectl</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubelet</span><span class="o">=</span>1.30.0-1.1 <span class="nv">kubectl</span><span class="o">=</span>1.30.0-1.1 <span class="nv">kubeadm</span><span class="o">=</span>1.30.0-1.1
</code></pre></div></div> <h3 id="configure-kubelet-node-ip">Configure Kubelet Node IP</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> jq
<span class="nv">local_ip</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>ip <span class="nt">--json</span> addr show eno1 | jq <span class="nt">-r</span> <span class="s1">'.[0].addr_info[] | select(.family == "inet") | .local'</span><span class="si">)</span><span class="s2">"</span>

<span class="nb">sudo tee</span> /etc/default/kubelet <span class="o">&gt;</span> /dev/null <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
KUBELET_EXTRA_ARGS=--node-ip=</span><span class="nv">$local_ip</span><span class="sh">
</span><span class="no">EOF
</span></code></pre></div></div> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">eno1</code> and <code class="language-plaintext highlighter-rouge">enp85s0</code> are network interface names that may vary depending on the system. You can check your network interfaces using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ifconfig <span class="nt">-a</span>
</code></pre></div></div> <p>or</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip a
</code></pre></div></div> <p>Adjust the interface name accordingly based on the output of these commands.</p> <h2 id="step-5-initialize-kubernetes-on-the-master-node">Step 5: Initialize Kubernetes on the Master Node</h2> <p>Set the master node IP and hostname:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">IPADDR</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>ip <span class="nt">--json</span> addr show enp85s0 | jq <span class="nt">-r</span> <span class="s1">'.[0].addr_info[] | select(.family == "inet") | .local'</span><span class="si">)</span><span class="s2">"</span>
<span class="nv">NODENAME</span><span class="o">=</span><span class="si">$(</span><span class="nb">hostname</span> <span class="nt">-s</span><span class="si">)</span>
<span class="nv">POD_CIDR</span><span class="o">=</span><span class="s2">"192.168.0.0/16"</span>
</code></pre></div></div> <p>Initialize Kubernetes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm init <span class="nt">--apiserver-advertise-address</span><span class="o">=</span><span class="nv">$IPADDR</span> <span class="nt">--apiserver-cert-extra-sans</span><span class="o">=</span><span class="nv">$IPADDR</span> <span class="nt">--pod-network-cidr</span><span class="o">=</span><span class="nv">$POD_CIDR</span> <span class="nt">--node-name</span> <span class="nv">$NODENAME</span> <span class="nt">--ignore-preflight-errors</span> Swap <span class="nt">--cri-socket</span> unix:///var/run/crio/crio.sock 
</code></pre></div></div> <p>Set up kubeconfig for the root user:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/.kube
<span class="nb">cp</span> <span class="nt">-i</span> /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
<span class="nb">chown</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span><span class="si">)</span> <span class="nv">$HOME</span>/.kube/config
</code></pre></div></div> <h2 id="step-6-deploy-network-and-monitoring-components">Step 6: Deploy Network and Monitoring Components</h2> <h3 id="install-calico-network-plugin">Install Calico Network Plugin</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://docs.projectcalico.org/manifests/calico.yaml
</code></pre></div></div> <h3 id="install-metrics-server">Install Metrics Server</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/techiescamp/kubeadm-scripts/main/manifests/metrics-server.yaml
</code></pre></div></div> <h3 id="install-ingress-controller">Install Ingress Controller</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.49.0/deploy/static/provider/baremetal/deploy.yaml
</code></pre></div></div> <h2 id="step-7-join-worker-nodes-to-the-cluster">Step 7: Join Worker Nodes to the Cluster</h2> <p>Generate a join command on the master node:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm token create <span class="nt">--print-join-command</span>
</code></pre></div></div> <p>Run the output command on worker nodes to join them to the cluster.</p> <h2 id="step-8-verify-cluster-status">Step 8: Verify Cluster Status</h2> <h3 id="check-nodes">Check Nodes</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get nodes
</code></pre></div></div> <h3 id="check-all-pods-in-a-specific-node">Check All Pods in a Specific Node</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">--all-namespaces</span> <span class="nt">--field-selector</span> spec.nodeName<span class="o">=</span>&lt;NODE_NAME&gt;
</code></pre></div></div> <h2 id="troubleshooting-tips">Troubleshooting Tips</h2> <ul> <li>Always check system logs: <code class="language-plaintext highlighter-rouge">journalctl -u kubelet</code></li> <li>Verify node status: <code class="language-plaintext highlighter-rouge">kubectl get nodes</code></li> <li>Check pod status: <code class="language-plaintext highlighter-rouge">kubectl get pods --all-namespaces</code></li> </ul> <h2 id="security-considerations">Security Considerations</h2> <ul> <li>Regularly update Kubernetes and CRI-O</li> <li>Implement RBAC (Role-Based Access Control)</li> <li>Use network policies</li> <li>Regularly scan containers for vulnerabilities</li> </ul> <p><strong>Note</strong>: Always refer to the official Kubernetes and CRI-O documentation for the most up-to-date information and best practices.</p>]]></content><author><name></name></author><category term="tutorial"/><category term="Kubernetes"/><category term="kubeadm"/><category term="cri.io"/><category term="beginners"/><summary type="html"><![CDATA[Learn how to set up a production-ready Kubernetes cluster using Kubeadm and CRI-O. This step-by-step guide covers prerequisites, installation, configuration, and best practices for deploying and managing your cluster effectively.]]></summary></entry><entry><title type="html">Setting Up a K3s Cluster with a Hello-World Deployment</title><link href="https://menraromial.github.io/blog/2024/setup-k3s-cluster/" rel="alternate" type="text/html" title="Setting Up a K3s Cluster with a Hello-World Deployment"/><published>2024-07-07T14:30:00+00:00</published><updated>2024-07-07T14:30:00+00:00</updated><id>https://menraromial.github.io/blog/2024/setup-k3s-cluster</id><content type="html" xml:base="https://menraromial.github.io/blog/2024/setup-k3s-cluster/"><![CDATA[<p>This tutorial will guide you through setting up a K3s cluster with one master node and two worker nodes, deploying a simple “Hello-World” application, and utilizing various <code class="language-plaintext highlighter-rouge">kubectl</code> commands to manage and inspect Kubernetes resources.</p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>Three Linux machines (or VMs) with access to each other.</li> <li>Basic understanding of Linux commands and Kubernetes concepts.</li> </ul> <h2 id="step-1-installing-k3s">Step 1: Installing K3s</h2> <h3 id="install-k3s-on-the-master-node">Install K3s on the Master Node</h3> <ol> <li> <p><strong>SSH into the Master Node:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ssh user@master-node-ip
</code></pre></div> </div> </li> <li> <p><strong>Install K3s:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl <span class="nt">-sfL</span> https://get.k3s.io |  <span class="nv">INSTALL_K3S_VERSION</span><span class="o">=</span>v1.27.12+k3s1 sh <span class="nt">-s</span> - <span class="nt">--disable</span> traefik <span class="nt">--write-kubeconfig-mode</span> 644 <span class="nt">--node-name</span> &lt;NODE_NAME&gt;
</code></pre></div> </div> </li> </ol> <p>The command installs K3s version <code class="language-plaintext highlighter-rouge">v1.27.12+k3s1</code> on a node named <code class="language-plaintext highlighter-rouge">&lt;NODE_NAME&gt;</code>, disables the default Traefik ingress controller, and sets the permissions for the kubeconfig file to <code class="language-plaintext highlighter-rouge">644</code>.</p> <ol> <li> <p><strong>Verify Installation:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get nodes
</code></pre></div> </div> <p>You should see the master node listed.</p> </li> </ol> <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97n9mbhc57emcmzbl4j9.png" alt="Image description"/></p> <h3 id="install-k3s-on-the-worker-nodes">Install K3s on the Worker Nodes</h3> <ol> <li> <p><strong>SSH into each Worker Node:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ssh user@worker-node-ip
</code></pre></div> </div> </li> <li> <p><strong>Get the token from the master node</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">cat</span> /var/lib/rancher/k3s/server/node-token
</code></pre></div> </div> </li> <li> <p><strong>Install K3s on Worker Nodes:</strong></p> <p>On each worker node, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl <span class="nt">-sfL</span> https://get.k3s.io | <span class="nv">INSTALL_K3S_VERSION</span><span class="o">=</span>v1.27.12+k3s1  <span class="nv">K3S_NODE_NAME</span><span class="o">=</span>YOUR_NODE_NAME <span class="nv">K3S_URL</span><span class="o">=</span>https://master-node-ip:6443 <span class="nv">K3S_TOKEN</span><span class="o">=</span>YOUR_NODE_TOKEN sh -
</code></pre></div> </div> <p>You can find the <code class="language-plaintext highlighter-rouge">YOUR_NODE_TOKEN</code> value on the master node at <code class="language-plaintext highlighter-rouge">/var/lib/rancher/k3s/server/node-token</code>.</p> </li> </ol> <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w2dhl0ynwvsr5r19e2j.png" alt="Image description"/></p> <ol> <li> <p><strong>Verify Worker Nodes Join the Cluster:</strong></p> <p>On the master node, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get nodes
</code></pre></div> </div> <p>You should see all nodes (master and workers) listed.</p> </li> </ol> <h2 id="step-2-verifying-node-status">Step 2: Verifying Node Status</h2> <p>To check the status of the nodes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get nodes
</code></pre></div></div> <p>You should see the master and worker nodes with the status <code class="language-plaintext highlighter-rouge">Ready</code>.</p> <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js3ik5rdbentis2q3rvv.png" alt="Image description"/></p> <h2 id="step-3-creating-a-pod">Step 3: Creating a Pod</h2> <p>Create a simple pod to ensure everything is working correctly.</p> <ol> <li> <p><strong>Create a YAML file named <code class="language-plaintext highlighter-rouge">hello-world-pod.yaml</code>:</strong></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
 <span class="na">metadata</span><span class="pi">:</span>
 <span class="na">name</span><span class="pi">:</span> <span class="s">hello-world</span>
 <span class="na">spec</span><span class="pi">:</span>
 <span class="na">containers</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hello</span>
     <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>  <span class="c1"># Replace with your desired Docker image</span>

</code></pre></div> </div> </li> <li> <p><strong>Apply the YAML file to create the pod:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl apply <span class="nt">-f</span> hello-world-pod.yaml
</code></pre></div> </div> </li> <li> <p><strong>Verify the Pod is Running:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get pods
</code></pre></div> </div> </li> <li> <p><strong>Describe the Pod:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl describe pod hello-world
</code></pre></div> </div> </li> </ol> <h2 id="step-4-deleting-the-pod">Step 4: Deleting the Pod</h2> <p>To delete the pod:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete pod hello-world
</code></pre></div></div> <h2 id="step-5-deploying-the-application">Step 5: Deploying the Application</h2> <h3 id="creating-a-namespace">Creating a namespace</h3> <p>A namespace in Kubernetes is used to organize and manage resources within a cluster, providing isolation and a way to divide cluster resources among multiple users or teams.</p> <p>The commands used in this process are:</p> <ol> <li><strong>View Existing Namespaces</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get namespaces
</code></pre></div> </div> <p>or</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get ns
</code></pre></div> </div> </li> <li><strong>Create a New Namespace</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create namespace demo
</code></pre></div> </div> </li> <li><strong>Verify the Creation of the Namespace</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get namespaces
</code></pre></div> </div> </li> </ol> <p>This process ensures you have successfully created the <code class="language-plaintext highlighter-rouge">demo</code> namespace and confirmed its presence in your Kubernetes cluster.</p> <h3 id="deployment-yaml-file">Deployment YAML File</h3> <p>A deployment in Kubernetes is a controller that manages the creation, scaling, and updating of a set of replicated Pods, ensuring the desired state of an application is maintained.</p> <p>Create a file named <code class="language-plaintext highlighter-rouge">hello-world-deployment.yaml</code> with the following content:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hello-world</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">demo</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">5</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hello-world</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hello-world</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hello-world</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">bashofmann/rancher-demo:1.0.0</span>
          <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">Always</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">12Mi"</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2m"</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">web</span>
              <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
          <span class="na">env</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">COW_COLOR</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s">purple</span>
          <span class="na">readinessProbe</span><span class="pi">:</span>
            <span class="na">httpGet</span><span class="pi">:</span>
              <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
              <span class="na">port</span><span class="pi">:</span> <span class="s">web</span>
          <span class="na">livenessProbe</span><span class="pi">:</span>
            <span class="na">httpGet</span><span class="pi">:</span>
              <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
              <span class="na">port</span><span class="pi">:</span> <span class="s">web</span>
</code></pre></div></div> <h3 id="explanation-of-the-yaml-file">Explanation of the YAML File</h3> <ul> <li><strong>apiVersion</strong>: Specifies the version of the Kubernetes API to use.</li> <li><strong>kind</strong>: Specifies the type of resource being created (Deployment).</li> <li><strong>metadata</strong>: Contains data that helps uniquely identify the object, including a <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">namespace</code>.</li> <li><strong>spec</strong>: Defines the desired state of the Deployment. <ul> <li><strong>replicas</strong>: Number of pod replicas to run.</li> <li><strong>selector</strong>: Defines how the Deployment finds which Pods to manage.</li> <li><strong>template</strong>: Defines the Pods that will be created. <ul> <li><strong>metadata</strong>: Labels for the Pods.</li> <li><strong>spec</strong>: Specification of the containers within the Pods. <ul> <li><strong>containers</strong>: List of containers in the Pod. <ul> <li><strong>name</strong>: Name of the container.</li> <li><strong>image</strong>: Docker image to use for the container.</li> <li><strong>imagePullPolicy</strong>: Policy to use for image pulls.</li> <li><strong>ports</strong>: Ports to expose from the container.</li> <li><strong>env</strong>: Environment variables for the container.</li> <li><strong>readinessProbe</strong>: Defines a probe to check if the container is ready.</li> <li><strong>livenessProbe</strong>: Defines a probe to check if the container is alive.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <hr/> <p>This is a Go demo application used for demonstrating Kubernetes and load balancing.</p> <p>It will create a colored icon for each replica within a ReplicaSet and indicate which one most recently served a response. Replicas which haven’t been heard from will begin to fade out, until after a configurable number of seconds they will disappear.</p> <p>For more information on using the container image, please click <a href="https://github.com/bashofmann/rancher-demo">here</a>.</p> <h3 id="apply-the-deployment">Apply the Deployment</h3> <ol> <li> <p><strong>Apply the YAML file to create the Deployment:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl apply <span class="nt">-f</span> hello-world-deployment.yaml
</code></pre></div> </div> </li> <li> <p><strong>Verify the Deployment and Pods:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get deployments <span class="nt">-n</span> demo
 kubectl get pods <span class="nt">-n</span> demo
</code></pre></div> </div> </li> <li> <p><strong>Check the ReplicaSets:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get replicaset <span class="nt">-n</span> demo
</code></pre></div> </div> </li> <li> <p><strong>For more information on replicas:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get pods <span class="nt">-n</span> demo <span class="nt">-o</span> wide
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">-o wide</code>: Provides additional details about each pod, such as the node it’s running on, the IP address, the container images, and more.</p> </li> <li> <p><strong>See the pods metrics</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl top pods <span class="nt">-n</span> demo
</code></pre></div> </div> <p>For nodes</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl top nodes
</code></pre></div> </div> </li> </ol> <h2 id="step-6-exposing-the-application">Step 6: Exposing the Application</h2> <p>Create a service to expose the Deployment.</p> <p>A service in Kubernetes provides a stable network endpoint to access a set of pods, ensuring consistent access despite pod restarts or IP changes.</p> <h4 id="types-of-services">Types of Services:</h4> <ul> <li><strong>ClusterIP</strong>: Exposes the service on an internal IP within the cluster, making it accessible only within the cluster.</li> <li><strong>NodePort</strong>: Exposes the service on each node’s IP at a static port, making it accessible from outside the cluster using <code class="language-plaintext highlighter-rouge">&lt;NodeIP&gt;:&lt;NodePort&gt;</code>.</li> <li><strong>LoadBalancer</strong>: Exposes the service externally using a cloud provider’s load balancer.</li> <li><strong>ExternalName</strong>: Maps the service to the contents of the <code class="language-plaintext highlighter-rouge">externalName</code> field (e.g., <code class="language-plaintext highlighter-rouge">foo.bar.example.com</code>), creating a DNS alias.</li> </ul> <ol> <li> <p><strong>Create a ClusterIP Service:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl expose deployment hello-world <span class="nt">--type</span><span class="o">=</span>ClusterIP <span class="nt">--name</span><span class="o">=</span>hello-world-service <span class="nt">--port</span><span class="o">=</span>8080 <span class="nt">--target-port</span><span class="o">=</span>8080 <span class="nt">-n</span> demo
</code></pre></div> </div> <ul> <li><strong>expose deployment hello-world</strong>: Creates a service to expose the deployment named <code class="language-plaintext highlighter-rouge">hello-world</code>.</li> <li><strong><code class="language-plaintext highlighter-rouge">--type=ClusterIP</code></strong>: Specifies the type of service to create. <code class="language-plaintext highlighter-rouge">ClusterIP</code> means the service will be accessible only within the cluster.</li> <li><strong><code class="language-plaintext highlighter-rouge">--name=hello-world-service</code></strong>: Assigns the name <code class="language-plaintext highlighter-rouge">hello-world-service</code> to the newly created service.</li> <li><strong><code class="language-plaintext highlighter-rouge">--port=8080</code></strong>: Defines the port on which the service will be exposed.</li> <li><strong><code class="language-plaintext highlighter-rouge">--target-port=8080</code></strong>: Specifies the port on the pod that the service should forward traffic to.</li> <li><strong><code class="language-plaintext highlighter-rouge">-n demo</code></strong>: Limits the scope of the command to the <code class="language-plaintext highlighter-rouge">demo</code> namespace.</li> </ul> </li> <li> <p><strong>Verify the Service:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get svc <span class="nt">-n</span> demo
</code></pre></div> </div> </li> </ol> <h2 id="step-7-accessing-the-application">Step 7: Accessing the Application</h2> <p>To access the application from your local machine, use <code class="language-plaintext highlighter-rouge">kubectl port-forward</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl port-forward svc/hello-world-service 8080:8080 <span class="nt">-n</span> demo <span class="nt">--address</span> node_address
</code></pre></div></div> <p>Open your browser and go to <code class="language-plaintext highlighter-rouge">http://node_address:8080</code> to see the application in action.</p> <ol> <li><strong>Create a service of type LoadBalancer</strong></li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl expose deployment hello-world <span class="nt">--type</span><span class="o">=</span>LoadBalancer <span class="nt">--name</span><span class="o">=</span>hello-world-service-loadbalancing <span class="nt">--port</span><span class="o">=</span>8080 <span class="nt">--target-port</span><span class="o">=</span>8080 <span class="nt">-n</span> demo
</code></pre></div></div> <p>Open your browser and go to <code class="language-plaintext highlighter-rouge">http://any_node_address:PORT</code> to see the application in action. <code class="language-plaintext highlighter-rouge">PORT</code> here is generated by default, see the image below.</p> <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r1n2277m60ukt74wohs.png" alt="Image description"/></p> <p>Application on the browser</p> <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mah2fyxsrjsat6wdah6.png" alt="Image description"/></p> <h2 id="step-8-inspecting-resources">Step 8: Inspecting Resources</h2> <h3 id="describing-a-pod">Describing a Pod</h3> <p>To get detailed information about a specific pod:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl describe pod &lt;pod-name&gt; <span class="nt">-n</span> demo
</code></pre></div></div> <h3 id="describing-a-deployment">Describing a Deployment</h3> <p>To get detailed information about the deployment:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl describe deployment hello-world <span class="nt">-n</span> demo
</code></pre></div></div> <h3 id="viewing-pod-logs">Viewing Pod Logs</h3> <p>To view the logs of a pod:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> &lt;pod-name&gt; <span class="nt">-n</span> demo
</code></pre></div></div> <h2 id="step-9-cleaning-up">Step 9: Cleaning Up</h2> <p>To delete all the resources created:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete namespace demo
</code></pre></div></div> <h2 id="conclusion">Conclusion</h2> <p>You’ve successfully set up a K3s cluster, deployed a simple application, and used various <code class="language-plaintext highlighter-rouge">kubectl</code> commands to manage and inspect Kubernetes resources. This foundation will help you explore Kubernetes further and leverage its capabilities.</p> <h1 id="bonus">Bonus</h1> <h2 id="scaling-and-deploying-a-horizontal-pod-autoscaler-in-kubernetes">Scaling and Deploying a Horizontal Pod Autoscaler in Kubernetes</h2> <h3 id="step-1-scaling-updown-manually">Step 1: Scaling Up/Down Manually</h3> <p>You can manually scale the number of replicas in a deployment using the <code class="language-plaintext highlighter-rouge">kubectl scale</code> command.</p> <h4 id="scale-up">Scale Up</h4> <p>To scale the <code class="language-plaintext highlighter-rouge">hello-world</code> deployment to 10 replicas:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl scale deployment hello-world <span class="nt">--replicas</span><span class="o">=</span>10 <span class="nt">-n</span> demo
</code></pre></div></div> <h4 id="scale-down">Scale Down</h4> <p>To scale the <code class="language-plaintext highlighter-rouge">hello-world</code> deployment back down to 3 replicas:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl scale deployment hello-world <span class="nt">--replicas</span><span class="o">=</span>3 <span class="nt">-n</span> demo
</code></pre></div></div> <h3 id="step-2-deploying-a-horizontal-pod-autoscaler-hpa">Step 2: Deploying a Horizontal Pod Autoscaler (HPA)</h3> <p>The Horizontal Pod Autoscaler automatically adjusts the number of pod replicas in a deployment based on observed CPU utilization (or other select metrics).</p> <h4 id="prerequisites-1">Prerequisites</h4> <p>Ensure that the Metrics Server is deployed in your cluster. The Metrics Server collects resource metrics from the Kubernetes nodes and pods and is required for HPA to function.</p> <p>To install the Metrics Server:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
</code></pre></div></div> <h4 id="deploy-hpa-for-the-hello-world-deployment">Deploy HPA for the <code class="language-plaintext highlighter-rouge">hello-world</code> Deployment</h4> <ol> <li> <p><strong>Create the HPA</strong></p> <p>Create the file <code class="language-plaintext highlighter-rouge">hello-world-hpa.yaml</code></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling/v2</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">HorizontalPodAutoscaler</span>
 <span class="na">metadata</span><span class="pi">:</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">hello-world-autoscaler</span>
   <span class="na">namespace</span><span class="pi">:</span> <span class="s">demo</span>
 <span class="na">spec</span><span class="pi">:</span>
   <span class="na">scaleTargetRef</span><span class="pi">:</span>
     <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
     <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">hello-world</span>
   <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">5</span>
   <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">20</span>
   <span class="na">metrics</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Resource</span>
     <span class="na">resource</span><span class="pi">:</span>
       <span class="na">name</span><span class="pi">:</span> <span class="s">cpu</span>
       <span class="na">target</span><span class="pi">:</span>
         <span class="na">type</span><span class="pi">:</span> <span class="s">Utilization</span>
         <span class="na">averageUtilization</span><span class="pi">:</span> <span class="m">70</span>
   <span class="na">behavior</span><span class="pi">:</span>
     <span class="na">scaleUp</span><span class="pi">:</span>
       <span class="na">stabilizationWindowSeconds</span><span class="pi">:</span> <span class="m">10</span>
       <span class="na">policies</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Pods</span>
         <span class="na">value</span><span class="pi">:</span> <span class="m">1</span>
         <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">5</span>
     <span class="na">scaleDown</span><span class="pi">:</span>
       <span class="na">stabilizationWindowSeconds</span><span class="pi">:</span> <span class="m">10</span>
       <span class="na">policies</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Pods</span>
         <span class="na">value</span><span class="pi">:</span> <span class="m">1</span>
         <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">5</span>


</code></pre></div> </div> <p>Apply</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> hello-world-hpa.yaml
</code></pre></div> </div> <p>This command sets up an HPA for the <code class="language-plaintext highlighter-rouge">hello-world</code> deployment that:</p> <ul> <li>Targets 70% CPU utilization.</li> <li>Scales the number of pod replicas between 1 and 10 based on the observed CPU utilization.</li> </ul> </li> <li> <p><strong>Verify the HPA</strong></p> <p>To check the status of the HPA:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get hpa <span class="nt">-n</span> demo
</code></pre></div> </div> <p>The output should show something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME          REFERENCE                TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
hello-world   Deployment/hello-world   10%/50%   1         10        3          5m
</code></pre></div> </div> </li> </ol> <h3 id="step-3-testing-the-hpa">Step 3: Testing the HPA</h3> <p>To test the HPA, you can simulate a load on the <code class="language-plaintext highlighter-rouge">hello-world</code> pods to observe the scaling behavior. Here’s how you can do it:</p> <ol> <li> <p><strong>Run a Load Generator Pod</strong></p> <p>Create a pod that continuously sends requests to the <code class="language-plaintext highlighter-rouge">hello-world</code> service. Create a file named <code class="language-plaintext highlighter-rouge">load-generator.yaml</code> with the following content:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">load-generator</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">demo</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">busybox</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
    <span class="na">args</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">/bin/sh</span>
    <span class="pi">-</span> <span class="s">-c</span>
    <span class="pi">-</span> <span class="pi">|</span>
      <span class="s">while true; do wget -q -O- http://NODE_IP_ADDRESS:8080; done</span>
</code></pre></div> </div> <p>Apply this YAML file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> load-generator.yaml
</code></pre></div> </div> </li> <li> <p><strong>Monitor the HPA</strong></p> <p>Keep an eye on the HPA status to see how it adjusts the number of replicas:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>watch <span class="nt">-n3</span> kubectl get hpa,pod <span class="nt">-n</span> demo <span class="nt">-o</span> wide
</code></pre></div> </div> <p>You should see the <code class="language-plaintext highlighter-rouge">TARGETS</code> column indicating higher CPU utilization, and the <code class="language-plaintext highlighter-rouge">REPLICAS</code> column increasing as the HPA scales up the deployment.</p> </li> <li> <p><strong>Stop the Load Generator</strong></p> <p>Once you’ve observed the scaling behavior, delete the load generator pod:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete pod load-generator <span class="nt">-n</span> demo
</code></pre></div> </div> </li> </ol> <h3 id="summary">Summary</h3> <ul> <li><strong>Manual Scaling</strong>: Use <code class="language-plaintext highlighter-rouge">kubectl scale</code> to manually adjust the number of replicas.</li> <li><strong>Horizontal Pod Autoscaler (HPA)</strong>: Automatically adjusts the number of replicas based on CPU utilization (or other metrics).</li> <li><strong>Metrics Server</strong>: Required for HPA to function, it collects resource metrics.</li> <li><strong>Testing HPA</strong>: Use a load generator to simulate traffic and observe the HPA scaling behavior.</li> </ul> <p>This guide helps you understand and implement both manual and automatic scaling in Kubernetes, ensuring your applications can handle varying loads efficiently.</p> <p><strong>Congratulations !!!</strong></p> <blockquote> <p>Why did the Kubernetes developer go broke? Because he lost all his containers! 🤣</p> </blockquote> <hr/>]]></content><author><name></name></author><category term="tutorial"/><category term="Kubernetes"/><category term="k3s"/><category term="beginners"/><summary type="html"><![CDATA[A comprehensive guide to setting up a lightweight Kubernetes cluster using K3s, deploying a "Hello-World" application, and exploring Kubernetes concepts like namespaces, deployments, services, and scaling with Horizontal Pod Autoscalers.]]></summary></entry><entry><title type="html">Découvrez la puissance de la commande Linux Screen pour une gestion efficace des sessions</title><link href="https://menraromial.github.io/blog/2024/dcouvrez-la-puissance-de-la-commande-linux-screen-pour-une-gestion-efficace-des-sessions/" rel="alternate" type="text/html" title="Découvrez la puissance de la commande Linux Screen pour une gestion efficace des sessions"/><published>2024-02-21T17:17:09+00:00</published><updated>2024-02-21T17:17:09+00:00</updated><id>https://menraromial.github.io/blog/2024/dcouvrez-la-puissance-de-la-commande-linux-screen-pour-une-gestion-efficace-des-sessions</id><content type="html" xml:base="https://menraromial.github.io/blog/2024/dcouvrez-la-puissance-de-la-commande-linux-screen-pour-une-gestion-efficace-des-sessions/"><![CDATA[<p>Avez-vous déjà été dans une situation où vous travailliez sur une tâche importante dans un terminal Linux et soudainement votre connexion est interrompue, perdant ainsi tout votre travail en cours ? Ou peut-être que vous souhaitez exécuter des processus en arrière-plan sans qu’ils soient interrompus lorsque vous vous déconnectez de votre session SSH ? Si oui, alors la commande `screen` est là pour vous sauver la vie !</p> <p><strong>Qu’est-ce que la commande Screen ?</strong></p> <p><strong>screen</strong> est une application de terminal qui permet la gestion de sessions multiples à l’intérieur d’une seule fenêtre de terminal, offrant ainsi une grande flexibilité pour travailler sur plusieurs tâches simultanément. L’un de ses avantages les plus importants est la capacité à détacher une session en cours et à la reprendre plus tard depuis n’importe quel endroit, même après une déconnexion inattendue.</p> <p><strong>Principales fonctionnalités de Screen :</strong></p> <p><strong>1. Création et gestion de sessions :<br/></strong>Avec <strong>screen</strong>, vous pouvez créer plusieurs sessions en parallèle, chacune étant indépendante des autres. Cela vous permet d’organiser vos tâches de manière logique et de passer facilement entre elles.</p> <p><strong>2. Détacher et attacher des sessions :<br/></strong>L’une des fonctionnalités les plus puissantes de <strong>screen</strong> est la possibilité de détacher une session en cours tout en laissant les processus qu’elle exécute se poursuivre en arrière-plan. Plus tard, vous pouvez réattacher cette session depuis n’importe où, même après une reconnexion au système.</p> <p><strong>3. Gestion des fenêtres :<br/>screen</strong> permet également de diviser la fenêtre du terminal en plusieurs régions, chacune pouvant contenir une session différente. Cela vous permet d’afficher plusieurs sessions simultanément et de basculer entre elles facilement.</p> <p><strong>4. Support des scripts et automatisation :<br/></strong>Vous pouvez automatiser des tâches en utilisant <strong>screen</strong> dans des scripts shell, ce qui peut être extrêmement utile pour exécuter des processus en arrière-plan de manière fiable.</p> <p><strong>Utilisation de base de la commande Screen :</strong></p> <ol><li><strong>Démarrer une nouvelle session :</strong></li></ol> <blockquote>screen -S &lt;NOM_session&gt;</blockquote> <p><strong>2. Détacher une session en cours :<br/></strong> Appuyez sur `Ctrl + A`, puis `Ctrl + D`.</p> <p><strong>3. Lister les sessions en cours :<br/></strong> <br/><strong><em> screen -ls</em></strong></p> <p><strong>4. Reprendre une session détachée :<br/></strong> <br/><strong><em> screen -r &lt;NOM_session&gt;</em></strong></p> <p><strong>5. Créer une nouvelle fenêtre :<br/></strong> Appuyez sur `Ctrl + A`, puis `C`.</p> <p><strong>6. Basculer entre les fenêtres :<br/></strong> Appuyez sur `Ctrl + A`, puis le numéro de la fenêtre.</p> <p><strong>Conclusion :</strong></p> <p>La commande <strong>screen </strong>est un outil indispensable pour tout administrateur système ou développeur travaillant sur des serveurs Linux. Sa capacité à gérer efficacement les sessions et les processus en arrière-plan en fait un outil incontournable pour ceux qui travaillent régulièrement en ligne de commande. En utilisant `screen`, vous pouvez éviter les pertes de travail dues à des déconnexions inattendues et améliorer votre productivité globale. N’attendez plus, plongez dans le monde de `screen` et simplifiez la gestion de vos sessions terminal dès aujourd’hui !</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ae025a0eef82" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>